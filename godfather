#!/usr/bin/env python3

import subprocess
import threading
import code

def repl(**locals):
    from pprint import pprint
    locals['pp'] = pprint
    code.InteractiveConsole(locals).interact()

def thread(target, *args, **kwargs):
    t = threading.Thread(target=target, args=args, kwargs=kwargs, daemon=True)
    t.start()

def printloop(f, output):
    if output:
        with open(output, 'ab') as g:
            while True:
                g.write(f.read(1024))
                g.flush()

    else:
        while True:
            print(f.read(60))

class VM:
    def __init__(self, p):
        self.p = p

    def kbd(self, data):
        self.p.stdin.write(data)
        self.p.stdin.flush()

    def kill(self):
        self.p.kill()
        self.p.wait()
        print('vm has exited')

def start_vm(args):
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0)
    return VM(p)

def run(args, output):
    vm = start_vm(args)
    try:
        thread(printloop, vm.p.stdout, output)
        repl(vm=vm)
    finally:
        vm.kill()

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output')
    parser.add_argument('cmd', nargs='+')
    options = parser.parse_args()
    run(options.cmd, options.output)
