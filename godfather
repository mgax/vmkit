#!/usr/bin/env python3

import subprocess
import threading
import code

def repl(**locals):
    from pprint import pprint
    locals['pp'] = pprint
    code.InteractiveConsole(locals).interact()

def thread(target, *args, **kwargs):
    t = threading.Thread(target=target, args=args, kwargs=kwargs, daemon=True)
    t.start()

class VM:
    def __init__(self, p):
        self.p = p
        self.stdout_handlers = []

    def _stdout_thread(self):
        while True:
            data = self.p.stdout.read(1024)
            if not data:
                return
            for handler in self.stdout_handlers:
                handler(data)

    def kbd(self, data):
        self.p.stdin.write(data)
        self.p.stdin.flush()

    def kill(self):
        self.p.kill()
        self.p.wait()
        print('vm has exited')

def start_vm(args, output):
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0)
    vm = VM(p)
    if output:
        output_file = open(output, 'ab')
        def handle_stdout(data):
            output_file.write(data)
            output_file.flush()
    else:
        def handle_stdout(data):
            print(data)
    vm.stdout_handlers.append(handle_stdout)
    threading.Thread(target=vm._stdout_thread, daemon=True).start()
    return vm

def run(args, output):
    vm = start_vm(args, output)
    try:
        repl(vm=vm)
    finally:
        vm.kill()

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output')
    parser.add_argument('cmd', nargs='+')
    options = parser.parse_args()
    run(options.cmd, options.output)
